-- ================================
-- Basic Configuration
-- ================================
setVerbose(false)
setSyslogFacility(3) -- LOG_DAEMON

setLocal("0.0.0.0:53")
newServer({ address = "127.0.0.1:5300" })
setACL({ "0.0.0.0/0", "::/0" })
setMaxUDPOutstanding(65535)

-- ================================
-- Packet Cache
-- ================================
pc = newPacketCache(100000, {
  maxTTL = 86400,
  maxNegativeTTL = 3600,
  minTTL = 0,
  temporaryFailureTTL = 60,
  staleTTL = 60
})
getPool(""):setCache(pc)

-- Ensure Lua module paths
package.path = package.path .. ";/usr/share/lua/5.1/?.lua;/usr/share/luajit-2.1.0-beta3/?.lua;/usr/lib/lua/5.1/?.lua"
package.cpath = package.cpath .. ";/usr/lib64/lua/5.1/?.so;/usr/lib64/luajit-2.1/?.so;/usr/lib/lua/5.1/?.so"

-- ================================
-- Socket Send using OS (nc)
-- ================================
function sendToSocketServer(dataStr)
  local safeStr = dataStr:gsub('"', '\\"')  -- escape quotes if needed
  local cmd = string.format('echo "%s" | nc 127.0.0.1 5001 &', safeStr)
  os.execute(cmd)
end

-- ================================
-- Load Suspicious IPs
-- ================================
function loadSuspiciousIPs()
    if enableBlocking then
        setACLFromFile("/opt/dnsai/data/suspicious_ips.csv")
    else
        print("[INFO] Suspicious IPs blocking disabled")
    end
end

-- ================================
-- Global Config
-- ================================
enableBlocking = false  -- Set to false to disable all blocking
windowSize = 60
ipStats = {}
probationIPs = {}
probationTimeout = 3600  -- 1 hour probation
reverseDnsRateLimit = 10

-- ================================
-- RCODE Map
-- ================================
local rcode_map = {
  [-1] = "PENDING",
  [0] = "NOERROR",
  [1] = "FORMERR",
  [2] = "SERVFAIL",
  [3] = "NXDOMAIN",
  [5] = "REFUSED"
}

-- ================================
-- Utility Functions
-- ================================
function calculateEntropy(s)
  local counts = {}
  for i = 1, #s do
    local c = s:sub(i, i)
    counts[c] = (counts[c] or 0) + 1
  end
  local entropy = 0
  for _, count in pairs(counts) do
    local p = count / #s
    entropy = entropy - p * math.log(p) / math.log(2)
  end
  return entropy
end

function extractSubdomain(qname)
  local labels = {}
  for label in string.gmatch(qname, "([^.]+)") do
    table.insert(labels, label)
  end
  if #labels <= 2 then return "" end
  return table.concat(labels, ".", 1, #labels - 2)
end

function calculateSubdomainEntropy(qname)
  return calculateEntropy(extractSubdomain(qname))
end

function calculateCaseRandomness(str)
    local transitions = 0
    local prevIsUpper = nil
    for i = 1, #str do
        local c = str:sub(i,i)
        local isUpper = c:match("[A-Z]") ~= nil
        if prevIsUpper ~= nil and isUpper ~= prevIsUpper then
            transitions = transitions + 1
        end
        prevIsUpper = isUpper
    end
    return transitions / math.max(#str - 1, 1)
end

function purgeOldStats(now)
  local purged = 0
  for ip, stats in pairs(ipStats) do
    local newWindow = {}
    for _, entry in ipairs(stats.queries) do
      if now - entry.time < windowSize then
        table.insert(newWindow, entry)
      else
        purged = purged + 1
      end
    end
    ipStats[ip].queries = newWindow
  end
  if purged > 0 then
    print(string.format("[DEBUG] Purged %d old stats", purged))
  end
end

function checkReverseDnsRate(clientIP, qname)
    if qname:match("%.in%-addr%.arpa$") or qname:match("%.ip6%.arpa$") then
        ipStats[clientIP] = ipStats[clientIP] or { queries = {}, reverseDnsCount = 0, lastReset = os.time() }
        if os.time() - ipStats[clientIP].lastReset > 60 then
            ipStats[clientIP].reverseDnsCount = 0
            ipStats[clientIP].lastReset = os.time()
        end
        ipStats[clientIP].reverseDnsCount = ipStats[clientIP].reverseDnsCount + 1
        if ipStats[clientIP].reverseDnsCount > reverseDnsRateLimit and enableBlocking then
            logDroppedQuery(clientIP, qname, "Reverse DNS", "Rate limit exceeded")
            return DNSAction.Drop, nil
        end
    end
    return DNSAction.None, ""
end

-- ================================
-- Logging Functions
-- ================================
function logFeatures(query_id, qname, clientIP, qname_length, entropy, sub_entropy, case_randomness, qtype, rcode, now, stats)
  local date = os.date("%Y%m%d", now)
  local query_log = string.format("/opt/dnsai/data/dns_query_features_%s.csv", date)
  local ip_log = string.format("/opt/dnsai/data/dns_ip_features_%s.csv", date)

  local subdomain = extractSubdomain(qname)
  local subdomain_length = #subdomain
  local is_reverse_dns = qname:match("%.in%-addr%.arpa$") or qname:match("%.ip6%.arpa$") and 1 or 0
  local legit_query_ratio = rcode == "NOERROR" and 1.0 or 0.0

  local query_line = string.format("%s,%s,%s,%d,%.2f,%.2f,%.2f,%d,%d,%.2f,%s,%d\n",
    query_id, qname, clientIP, qname_length, entropy, sub_entropy, case_randomness,
    subdomain_length, is_reverse_dns, legit_query_ratio, rcode, now)

  local f = io.open(query_log, "a")
  if f then f:write(query_line); f:close() end

  if stats then
    local total = #stats
    local nxd, servfail, refused, reverse_dns = 0, 0, 0, 0
    local sum_entropy, sum_sub_entropy = 0, 0
    local domain_set = {}
    local repeated_query_count = 0
    for _, q in ipairs(stats) do
      if q.qname == qname then repeated_query_count = repeated_query_count + 1 end
      if q.rcode == 3 then nxd = nxd + 1 end
      if q.rcode == 2 then servfail = servfail + 1 end
      if q.rcode == 5 then refused = refused + 1 end
      if q.qname:match("%.in%-addr%.arpa$") or q.qname:match("%.ip6%.arpa$") then reverse_dns = reverse_dns + 1 end
      sum_entropy = sum_entropy + q.entropy
      sum_sub_entropy = sum_sub_entropy + q.sub_entropy
      domain_set[q.qname] = true
    end

    local avg_entropy = total > 0 and sum_entropy / total or 0
    local avg_sub_entropy = total > 0 and sum_sub_entropy / total or 0
    local nxd_ratio = total > 0 and nxd / total or 0
    local servfail_ratio = total > 0 and servfail / total or 0
    local refused_ratio = total > 0 and refused / total or 0
    local unique_domains = 0
    for _ in pairs(domain_set) do unique_domains = unique_domains + 1 end
    local query_rate = total / windowSize
    local query_burst = total > 50 and windowSize < 10 and 1 or 0
    local reverse_dns_ratio = total > 0 and reverse_dns / total or 0
    local legit_query_ratio = total > 0 and (total - nxd - servfail - refused) / total or 0

    local ip_line = string.format("%s,%s,%d,%d,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%d,%.2f,%.2f,%d\n",
      query_id, clientIP, total, unique_domains, avg_entropy, avg_sub_entropy,
      nxd_ratio, servfail_ratio, refused_ratio, query_rate, repeated_query_count,
      query_burst, reverse_dns_ratio, legit_query_ratio, now)

    local f = io.open(ip_log, "a")
    if f then f:write(ip_line); f:close() end
  end
end

function logDroppedQuery(clientIP, qname, qtype, reason)
  local date = os.date("%Y%m%d", os.time())
  local dropped_log = string.format("/opt/dnsai/data/dns_dropped_queries_%s.csv", date)
  local line = string.format("%s,%s,%s,%s,%d\n",
    qname, clientIP, qtype, reason, os.time())

  local f = io.open(dropped_log, "a")
  if f then f:write(line); f:close() end
end

-- ================================
-- Pre-Resolution Handler
-- ================================
function preResolutionHandler(dq)
  if not dq then return DNSAction.None, "" end

  local qname = dq.qname:toString():gsub("%.$", ""):lower()
  local clientIP = dq.remoteaddr:toString()
  local qtype = dq.qtype
  local now = os.time()
  local query_id = string.format("%d_%s_%s", now, clientIP, qname)
  local start_time = os.clock()

  purgeOldStats(now)

  -- Check probation and rate limiting
  if probationIPs[clientIP] and (os.time() - probationIPs[clientIP] < probationTimeout) and enableBlocking then
    local result, _ = checkReverseDnsRate(clientIP, qname)
    if result == DNSAction.Drop then
      return result, nil
    end
  end

  local entropy = calculateEntropy(qname)
  local sub_entropy = calculateSubdomainEntropy(qname)
  local case_randomness = calculateCaseRandomness(qname)
  local qname_length = #qname

  ipStats[clientIP] = ipStats[clientIP] or { queries = {}, noerror_count = 0 }
  table.insert(ipStats[clientIP].queries, {
    query_id = query_id,
    time = now,
    qname = qname,
    rcode = -1,
    entropy = entropy,
    sub_entropy = sub_entropy,
    qtype = qtype
  })

  -- Calculate per-IP statistics
  local stats = ipStats[clientIP].queries
  local total = #stats
  local nxd, servfail, refused, reverse_dns = 0, 0, 0, 0
  local sum_entropy, sum_sub_entropy = 0, 0
  local domain_set = {}
  local repeated_query_count = 0

  for _, q in ipairs(stats) do
    if q.qname == qname then repeated_query_count = repeated_query_count + 1 end
    if q.rcode == 3 then nxd = nxd + 1 end
    if q.rcode == 2 then servfail = servfail + 1 end
    if q.rcode == 5 then refused = refused + 1 end
    if q.qname:match("%.in%-addr%.arpa$") or q.qname:match("%.ip6%.arpa$") then reverse_dns = reverse_dns + 1 end
    sum_entropy = sum_entropy + q.entropy
    sum_sub_entropy = sum_sub_entropy + q.sub_entropy
    domain_set[q.qname] = true
  end

  local avg_entropy = total > 0 and sum_entropy / total or 0
  local avg_sub_entropy = total > 0 and sum_sub_entropy / total or 0
  local nxd_ratio = total > 0 and nxd / total or 0
  local servfail_ratio = total > 0 and servfail / total or 0
  local refused_ratio = total > 0 and refused / total or 0
  local unique_domains = 0
  for _ in pairs(domain_set) do unique_domains = unique_domains + 1 end
  local query_rate = total / windowSize
  local query_burst = total > 50 and windowSize < 10 and 1 or 0
  local reverse_dns_ratio = total > 0 and reverse_dns / total or 0
  local legit_query_ratio = total > 0 and ipStats[clientIP].noerror_count / total or 0

  -- Threshold rule
  if query_rate > 100 and enableBlocking then
    logDroppedQuery(clientIP, qname, qtype, "Rate limit exceeded")
    return DNSAction.Drop, nil
  end

  -- Send to external socket server
  local query_data_str = string.format(
    "%s|%s|%s|%d|%.2f|%.2f|%.2f|%d|%s|%d|%d|%.2f|%.2f|%.2f|%.2f|%.2f|%.2f|%d|%.2f|%.2f",
    query_id, clientIP, qname, qname_length, entropy, sub_entropy, case_randomness, qtype, rcode_map[-1],
    total, unique_domains, avg_entropy, avg_sub_entropy,
    nxd_ratio, servfail_ratio, refused_ratio, query_rate, repeated_query_count,
    query_burst, reverse_dns_ratio, legit_query_ratio
  )
  sendToSocketServer(query_data_str)

  logFeatures(query_id, qname, clientIP, qname_length, entropy, sub_entropy, case_randomness, qtype, rcode_map[-1], now, stats)

  dq:setTag("context", string.format("%s|%s|%s|%d|%.2f|%.2f|%.2f|%d", query_id, qname, clientIP, qname_length, entropy, sub_entropy, case_randomness, qtype))
  return DNSAction.None, ""
end

-- ================================
-- Post-Resolution Handler
-- ================================
function postResolutionHandler(dr)
  local context = dr:getTag("context")
  if not context then return DNSResponseAction.None, "" end

  local query_id, qname, clientIP, qname_length, entropy, sub_entropy, case_randomness, qtype =
    context:match("([^|]+)|([^|]+)|([^|]+)|([^|]+)|([^|]+)|([^|]+)|([^|]+)|([^|]+)")

  local rcode = dr.rcode
  local now = os.time()

  qname_length = tonumber(qname_length)
  entropy = tonumber(entropy)
  sub_entropy = tonumber(sub_entropy)
  case_randomness = tonumber(case_randomness)
  qtype = tonumber(qtype)

  if ipStats[clientIP] and ipStats[clientIP].queries then
    for _, q in ipairs(ipStats[clientIP].queries) do
      if q.query_id == query_id and q.rcode == -1 then
        q.rcode = rcode
        if rcode == 0 then ipStats[clientIP].noerror_count = ipStats[clientIP].noerror_count + 1 end
        break
      end
    end
  end

  local stats = ipStats[clientIP] and ipStats[clientIP].queries or {}

  local total = #stats
  local nxd, servfail, refused, reverse_dns = 0, 0, 0, 0
  local sum_entropy, sum_sub_entropy = 0, 0
  local domain_set = {}
  local repeated_query_count = 0

  for _, q in ipairs(stats) do
    if q.qname == qname then repeated_query_count = repeated_query_count + 1 end
    if q.rcode == 3 then nxd = nxd + 1 end
    if q.rcode == 2 then servfail = servfail + 1 end
    if q.rcode == 5 then refused = refused + 1 end
    if q.qname:match("%.in%-addr%.arpa$") or q.qname:match("%.ip6%.arpa$") then reverse_dns = reverse_dns + 1 end
    sum_entropy = sum_entropy + q.entropy
    sum_sub_entropy = sum_sub_entropy + q.sub_entropy
    domain_set[q.qname] = true
  end

  local avg_entropy = total > 0 and sum_entropy / total or 0
  local avg_sub_entropy = total > 0 and sum_sub_entropy / total or 0
  local nxd_ratio = total > 0 and nxd / total or 0
  local servfail_ratio = total > 0 and servfail / total or 0
  local refused_ratio = total > 0 and refused / total or 0
  local unique_domains = 0
  for _ in pairs(domain_set) do unique_domains = unique_domains + 1 end
  local query_rate = total / windowSize
  local query_burst = total > 50 and windowSize < 10 and 1 or 0
  local reverse_dns_ratio = total > 0 and reverse_dns / total or 0
  local legit_query_ratio = total > 0 and ipStats[clientIP].noerror_count / total or 0

  -- Send to socket
  local query_data_str = string.format(
    "%s|%s|%s|%d|%.2f|%.2f|%.2f|%d|%s|%d|%d|%.2f|%.2f|%.2f|%.2f|%.2f|%.2f|%d|%.2f|%.2f",
    query_id, clientIP, qname, qname_length, entropy, sub_entropy, case_randomness, qtype, rcode_map[rcode] or tostring(rcode),
    total, unique_domains, avg_entropy, avg_sub_entropy,
    nxd_ratio, servfail_ratio, refused_ratio, query_rate, repeated_query_count,
    query_burst, reverse_dns_ratio, legit_query_ratio
  )
  sendToSocketServer(query_data_str)

  logFeatures(query_id, qname, clientIP, qname_length, entropy, sub_entropy, case_randomness, qtype, rcode_map[rcode] or tostring(rcode), now, stats)

  -- Apply prediction
  local socket = require("socket")
  local client = socket.tcp()
  client:settimeout(1)
  local success, err = client:connect("127.0.0.1", 5001)
  if not success then
    print(string.format("[ERROR] Socket connection failed: %s", err))
    return DNSResponseAction.None, ""
  end
  client:send(query_data_str .. "\n")
  local response, err = client:receive()
  client:close()
  if not response then
    print(string.format("[ERROR] Socket response failed: %s", err))
    return DNSResponseAction.None, ""
  end
  local json = require("cjson")  -- Use lua-cjson
  local resp = json.decode(response)
  if resp.shouldBlock and enableBlocking then
    logDroppedQuery(clientIP, qname, qtype, "Blocked by prediction")
    return DNSAction.Drop, nil
  end
  if resp.ipProba and resp.ipProba > 0.5 and resp.ipProba < 0.9 and enableBlocking then
    probationIPs[clientIP] = os.time()
    print(string.format("[INFO] Added %s to probation", clientIP))
  end
  return DNSResponseAction.None, ""
end

-- ================================
-- Register Handlers
-- ================================
addAction(AllRule(), LuaAction(preResolutionHandler))
addResponseAction(AllRule(), LuaResponseAction(postResolutionHandler))

-- ================================
-- Initialize
-- ================================
loadSuspiciousIPs()